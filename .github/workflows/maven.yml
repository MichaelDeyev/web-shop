# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: 
      - '*'
  pull_request:
    branches: 
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 123
#          SPRING_DATASOURCE_URLjdbc: postgresql://client-db:5432/nfo-client
#          SPRING_DATASOURCE_USERNAME: postgres
#          SPRING_DATASOURCE_PASSWORD: 123
#          SPRING_JPA_HIBERNATE_DDL_AUTO: validate
        # Maps tcp port 5432 on service container to the host
        ports:
          - 5432:5432

        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:

      # Downloads a copy of the code in your repository before running CI tests
    - name: Checkout repository
      uses: actions/checkout@v2
      # Set JDK 11
    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11

    # Performs a clean installation of all dependencies in the `package.json` file
    # For more information, see https://docs.npmjs.com/cli/ci.html
    - name: Connect to PostgreSQL
      run:

    - name: Build with Maven
      run: mvn -B clean package --file ./shop/pom.xml
